{"ast":null,"code":"import _initializerDefineProperty from \"/Users/kirill/Work/NewConfigTools/node_modules/@babel/runtime/helpers/esm/initializerDefineProperty\";\nimport _applyDecoratedDescriptor from \"/Users/kirill/Work/NewConfigTools/node_modules/@babel/runtime/helpers/esm/applyDecoratedDescriptor\";\nimport _initializerWarningHelper from \"/Users/kirill/Work/NewConfigTools/node_modules/@babel/runtime/helpers/esm/initializerWarningHelper\";\n\nvar _dec, _class, _class2, _descriptor, _temp;\n\nimport { observable, action } from 'mobx';\nimport { injectable } from \"inversify\";\nlet PlayersStore = (_dec = injectable(), _dec(_class = (_class2 = (_temp = class PlayersStore {\n  constructor() {\n    _initializerDefineProperty(this, \"players\", _descriptor, this);\n  }\n\n  async getPlayers(id) {\n    try {// this.players = await fetchPlayersApi(id);\n    } catch (response) {\n      alert(response.message);\n    }\n  }\n\n  getPlayersHistory(userId) {\n    var _this$players$find;\n\n    return ((_this$players$find = this.players.find(({\n      id\n    }) => id === userId)) === null || _this$players$find === void 0 ? void 0 : _this$players$find.history) || [];\n  }\n\n}, _temp), (_descriptor = _applyDecoratedDescriptor(_class2.prototype, \"players\", [observable], {\n  configurable: true,\n  enumerable: true,\n  writable: true,\n  initializer: function () {\n    return [];\n  }\n}), _applyDecoratedDescriptor(_class2.prototype, \"getPlayers\", [action], Object.getOwnPropertyDescriptor(_class2.prototype, \"getPlayers\"), _class2.prototype)), _class2)) || _class);\nexport { PlayersStore };","map":{"version":3,"sources":["/Users/kirill/Work/NewConfigTools/src/store/players.store.ts"],"names":["observable","action","injectable","PlayersStore","getPlayers","id","response","alert","message","getPlayersHistory","userId","players","find","history"],"mappings":";;;;;;AAAA,SAASA,UAAT,EAAqBC,MAArB,QAAmC,MAAnC;AACA,SAASC,UAAT,QAA2B,WAA3B;IAKMC,Y,WADLD,UAAU,E,oCAAX,MACMC,YADN,CACgD;AAAA;AAAA;AAAA;;AAG9C,QACaC,UADb,CACwBC,EADxB,EACmD;AACjD,QAAG,CACD;AACD,KAFD,CAEE,OAAOC,QAAP,EAAiB;AACjBC,MAAAA,KAAK,CAACD,QAAQ,CAACE,OAAV,CAAL;AACD;AACF;;AAEMC,EAAAA,iBAAP,CAAyBC,MAAzB,EAAkD;AAAA;;AAChD,WAAO,4BAAKC,OAAL,CAAaC,IAAb,CAAkB,CAAC;AAACP,MAAAA;AAAD,KAAD,KAAUA,EAAE,KAAKK,MAAnC,2EAA4CG,OAA5C,KAAuD,EAA9D;AACD;;AAd6C,C,kFAC7Cb,U;;;;;WAA8B,E;;gEAE9BC,M;AAcH,SAASE,YAAT","sourcesContent":["import { observable, action } from 'mobx'\nimport { injectable } from \"inversify\";\nimport { fetchPlayersApi } from '../api'\nimport { History, Players, PlayersStoreModel } from '../models/players.model'\n\n@injectable()\nclass PlayersStore implements PlayersStoreModel {\n  @observable players: Players = [];\n\n  @action\n  public async getPlayers(id: string): Promise<void> {\n    try{\n      // this.players = await fetchPlayersApi(id);\n    } catch (response) {\n      alert(response.message);\n    }\n  }\n \n  public getPlayersHistory(userId: string): History {\n    return this.players.find(({id}) => id === userId)?.history || [];\n  }\n}\n\nexport { PlayersStore }\n"]},"metadata":{},"sourceType":"module"}