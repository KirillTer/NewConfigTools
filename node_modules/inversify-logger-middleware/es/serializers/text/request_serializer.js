/**
 * inversify-logger-middleware v.1.0.1 - A basic logger middleware for InversifyJS
 * Copyright (c) 2015 Remo H. Jansen <remo.jansen@wolksoftware.com> (http://www.remojansen.com)
 * MIT inversify.io/LICENSE
 * https://github.com/inversify/inversify-logger-middleware#readme
 */
import { getIndentationForDepth, makePropertyLogger } from "./text_serializer_utils";
import serializeBinding from "./binding_serializer";
import serializeTarget from "./target_serializer";
function serializeRequest(textEntry, depth, index, request) {
    var indentation = getIndentationForDepth(depth);
    var propertyLogger = makePropertyLogger(indentation);
    textEntry = propertyLogger(textEntry, 0, "Request", index.toString());
    if (request.serviceIdentifier !== undefined) {
        textEntry = propertyLogger(textEntry, 1, "serviceIdentifier", request.serviceIdentifier);
    }
    if (request.bindings !== undefined && Array.isArray(request.bindings)) {
        textEntry = propertyLogger(textEntry, 1, "bindings");
        request.bindings.forEach(function (binding, bindingIndex) {
            textEntry = propertyLogger(textEntry, 2, "Binding<" + request.serviceIdentifier + ">", bindingIndex.toString());
            textEntry = serializeBinding(textEntry, depth, binding);
        });
    }
    textEntry = serializeTarget(textEntry, depth, request.target);
    if (request.childRequests !== undefined && Array.isArray(request.childRequests) && request.childRequests.length > 0) {
        textEntry = propertyLogger(textEntry, 1, "childRequests");
        request.childRequests.forEach(function (childRequest, childIndex) {
            textEntry = serializeRequest(textEntry, (depth + 2), childIndex, childRequest);
        });
    }
    return textEntry;
}
export default serializeRequest;
