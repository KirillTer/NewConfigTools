/**
 * inversify-logger-middleware v.1.0.1 - A basic logger middleware for InversifyJS
 * Copyright (c) 2015 Remo H. Jansen <remo.jansen@wolksoftware.com> (http://www.remojansen.com)
 * MIT inversify.io/LICENSE
 * https://github.com/inversify/inversify-logger-middleware#readme
 */
import deatultOptions from "./config/default_settings";
import consoleRenderer from "./renderers/console_renderer";
import requestReducer from "./reducers/request_reducer";
import textSerializer from "./serializers/text/text_serializer";
import { guid } from "./utils/utils";
import { getTime, getTimeDiference } from "./utils/utils";
import bindingTypeFormatter from "./formatters/binding_type_formatter";
import scopeFormatter from "./formatters/scope_formatter";
function makeLoggerMiddleware(settings, renderer) {
    var logger = function (planAndResolve) {
        return function (args) {
            if (settings === undefined || settings === null) {
                settings = deatultOptions;
            }
            ;
            if (renderer === undefined || renderer === null) {
                renderer = consoleRenderer;
            }
            ;
            var results = null;
            var logEntry = {
                error: false,
                exception: null,
                guid: guid(),
                multiInject: args.multiInject,
                results: [],
                rootRequest: null,
                serviceIdentifier: args.serviceIdentifier,
                target: args.target,
                time: null
            };
            var nextContextInterceptor = args.contextInterceptor;
            args.contextInterceptor = function (context) {
                logEntry.rootRequest = requestReducer(context.plan.rootRequest, settings.request);
                return nextContextInterceptor(context);
            };
            try {
                var start = getTime();
                results = planAndResolve(args);
                var end = getTime();
                logEntry.results = results;
                logEntry.time = (settings.time) ? getTimeDiference(start, end) : null;
            }
            catch (e) {
                logEntry.error = true;
                logEntry.exception = e;
                logEntry.time = null;
            }
            renderer(logEntry);
            return results || [];
        };
    };
    return logger;
}
export { makeLoggerMiddleware, textSerializer, bindingTypeFormatter, scopeFormatter };
