/**
 * inversify-logger-middleware v.1.0.1 - A basic logger middleware for InversifyJS
 * Copyright (c) 2015 Remo H. Jansen <remo.jansen@wolksoftware.com> (http://www.remojansen.com)
 * MIT inversify.io/LICENSE
 * https://github.com/inversify/inversify-logger-middleware#readme
 */
"use strict";
var text_serializer_utils_1 = require("./text_serializer_utils");
var binding_type_formatter_1 = require("../../formatters/binding_type_formatter");
var scope_formatter_1 = require("../../formatters/scope_formatter");
function serializeBinding(textEntry, depth, binding) {
    var indentation = text_serializer_utils_1.getIndentationForDepth(depth);
    var propertyLogger = text_serializer_utils_1.makePropertyLogger(indentation);
    var props = [
        "type", "serviceIdentifier", "implementationType",
        "activated", "cache", "constraint", "dynamicValue",
        "factory", "onActivation", "provider", "scope"
    ];
    var _b = binding;
    props.forEach(function (prop) {
        if (_b[prop] !== undefined) {
            var val = _b[prop];
            switch (prop) {
                case "type":
                    val = binding_type_formatter_1.default(_b[prop]);
                    break;
                case "scope":
                    val = scope_formatter_1.default(_b[prop]);
                    break;
                case "implementationType":
                    val = _b[prop].name;
                    break;
                default:
                    val = _b[prop];
            }
            textEntry = propertyLogger(textEntry, 3, prop, val);
        }
    });
    return textEntry;
}
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = serializeBinding;
