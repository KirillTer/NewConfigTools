/**
 * inversify-logger-middleware v.1.0.1 - A basic logger middleware for InversifyJS
 * Copyright (c) 2015 Remo H. Jansen <remo.jansen@wolksoftware.com> (http://www.remojansen.com)
 * MIT inversify.io/LICENSE
 * https://github.com/inversify/inversify-logger-middleware#readme
 */
"use strict";
var default_settings_1 = require("./config/default_settings");
var console_renderer_1 = require("./renderers/console_renderer");
var request_reducer_1 = require("./reducers/request_reducer");
var text_serializer_1 = require("./serializers/text/text_serializer");
exports.textSerializer = text_serializer_1.default;
var utils_1 = require("./utils/utils");
var utils_2 = require("./utils/utils");
var binding_type_formatter_1 = require("./formatters/binding_type_formatter");
exports.bindingTypeFormatter = binding_type_formatter_1.default;
var scope_formatter_1 = require("./formatters/scope_formatter");
exports.scopeFormatter = scope_formatter_1.default;
function makeLoggerMiddleware(settings, renderer) {
    var logger = function (planAndResolve) {
        return function (args) {
            if (settings === undefined || settings === null) {
                settings = default_settings_1.default;
            }
            ;
            if (renderer === undefined || renderer === null) {
                renderer = console_renderer_1.default;
            }
            ;
            var results = null;
            var logEntry = {
                error: false,
                exception: null,
                guid: utils_1.guid(),
                multiInject: args.multiInject,
                results: [],
                rootRequest: null,
                serviceIdentifier: args.serviceIdentifier,
                target: args.target,
                time: null
            };
            var nextContextInterceptor = args.contextInterceptor;
            args.contextInterceptor = function (context) {
                logEntry.rootRequest = request_reducer_1.default(context.plan.rootRequest, settings.request);
                return nextContextInterceptor(context);
            };
            try {
                var start = utils_2.getTime();
                results = planAndResolve(args);
                var end = utils_2.getTime();
                logEntry.results = results;
                logEntry.time = (settings.time) ? utils_2.getTimeDiference(start, end) : null;
            }
            catch (e) {
                logEntry.error = true;
                logEntry.exception = e;
                logEntry.time = null;
            }
            renderer(logEntry);
            return results || [];
        };
    };
    return logger;
}
exports.makeLoggerMiddleware = makeLoggerMiddleware;
