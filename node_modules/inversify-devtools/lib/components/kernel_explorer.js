"use strict";
var __extends = (this && this.__extends) || function (d, b) {
    for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p];
    function __() { this.constructor = d; }
    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
};
var React = require("react");
var panel_1 = require("./panel");
var tip_1 = require("./tip");
var dir = {
    close: "&#9657",
    open: "&#9663;"
};
var KernelExplorer = (function (_super) {
    __extends(KernelExplorer, _super);
    function KernelExplorer(props) {
        _super.call(this, props);
    }
    KernelExplorer.prototype.render = function () {
        return (React.createElement(panel_1.default, {title: "Kernels", subtitle: "Explorer", columnSize: this.props.columnSize, height: this.props.height}, this._render()));
    };
    KernelExplorer.prototype._render = function () {
        if (this.props.kernels.length > 0) {
            var kernels = this._renderKernels(this.props.kernels);
            return React.createElement("div", null, kernels);
        }
        else {
            return React.createElement(tip_1.default, null, "No Kernels found! Use global", React.createElement("span", {className: "label label-default", style: { backgroundColor: "transparent" }}, "__inversifyDevtools__"), "to connect a kernel.");
        }
    };
    KernelExplorer.prototype._handleClick = function (kernel) {
        this.props.selectKernel(kernel);
    };
    KernelExplorer.prototype._renderKernels = function (kernels) {
        var _this = this;
        return kernels.map(function (kernel, id) {
            return (React.createElement("div", {key: id, className: "request requestBox defaultBox", onClick: function (e) { _this._handleClick(kernel); }}, React.createElement("div", {class: "title"}, React.createElement("h6", null, "GUID: ", kernel.details.guid), React.createElement("h2", null, "Kernel"))));
        });
    };
    return KernelExplorer;
}(React.Component));
Object.defineProperty(exports, "__esModule", { value: true });
exports.default = KernelExplorer;
